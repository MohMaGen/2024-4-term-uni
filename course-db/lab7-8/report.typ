
#import "lab.typ":template
#import "@preview/cetz:0.2.2"
#import "@preview/tablex:0.0.8": tablex, rowspanx, colspanx
#import "@preview/fletcher:0.5.1" as fletcher: diagram, node, edge

#show figure.where(kind: "Add"): set figure(numbering:"1")

#show: template.with(
        author-first-name: "Марк Геннадьевич",
        author-last-name: "Мохов",
        author-initials: "М.Г.",
        group: "КС-34",
        variant: "11",

        title: [
            Лабораторная работа №7 по предмету управление данными:\
            "ВЕДЕНИЕ В СУБД MONGODB. УСТАНОВКА MONGODB. НАЧАЛО РАБОТЫ С
БД"
.
        ],
        city: "Москва",

        organization: [
        Министерство науки и высшего образования Российской Федерации\
        Российский химико-технологический университет имени Д. И. Менделеева
        ],
        in-organization: [
            Факультет цифровых технологий и химического инжиниринга\
            Кафедра информационных компьютерных технологий
        ],
        supervisor-first-name: "Генадий Николаевич",
        supervisor-last-name: "Семёнов",
        supervisor-initials: "Г.Н.",
        supervisor-regalia: "",
        supervisor-regalia-short: "уч. ст., уч. зв.",

        font-type: "Times New Roman",
        link-color: blue.darken(60%),
        languages: (),
)

= Цель работы и практическое задание
== Цель
	Овладеть практическими навыками установки СУБД MongoDB.
== Задание
 
+ Установите MongoDB в зависимости от типов систем (32/64 бита).

+ Проверьте работоспособность системы запуском клиента mongo или
    mongosh.

+ Выполните методы:
    + db.help()
    + db.help
    + db.stats()
+ Получите список доступных БД.

+ Создайте БД в соответствии с вариантом задания Лабораторной работы №1,
    имя БД вводится латиницей в формате «Фамилия_группа», например,
    db> use Ivanov_ks30

+ Создайте коллекцию, вставив в нее документы в соответствии со строками
    таблицы вашего варианта задания Лабораторной работы №1
        Например:
            Результаты ЕГЭ:
    #figure(
        caption: [В СУБД MongoDB создайте базу данных],
        tablex(
            align: center + horizon,
            columns: (auto, auto, auto, auto, auto, auto, auto),
            [Дата экзамена],
            [Школа №], [ Балл], [Ученик], [Возраст],
            [Дисциплина], [Экзаменатор],
            [3.06.06],[114],[85],[Иванов],[18],[Математика],[Кузнецов],

            [15.06.06],[295],[79],[Петрова],[17],[Русский Язык],[Филатова],

            [2.06.06],[1197],[91],[Сидорова],[19],[Математика],[Кузнецов],

            [2.06.06],[114],[62],[Иванов],[18],[Русский Язык],[Филатова],

            [14.06.06],[1197],[77],[Сидорова],[19],[Физика],[Гришин],

            [4.06.06],[295],[81],[Петрова],[17],[Математика],[Кузнецов],
        )   
    )
+ Выведете список текущих коллекций вашей БД.
+ Выведете содержимое созданной коллекции

+ В приложении MongoDB Compass сделайте экcпорт коллекции вашей БД в
    файл ```*json```.
+ Файл отчета в формате WORD и файл коллекции в формате ```*.json``` загрузите
    на учебный портал в курсе «Управление данными» в раздел «Сдать Лаб.7»

= Выполнение практического задания.
== Установка MongoDB.

Из-за особенностей операционной системы, я устанавливал MongoDB
Через ``` docker``` контейнер.

В начале установил образ MongoDB:
```bash
doas docker pull mongo:latest
```

Затем создал контейнер с названием ```mongo-lab7-8```:
```bash
doas docker run -d -p 27017:27017 --name mongo-lab7-8 mongo:latest
```

== Проверьте работоспособность системы запуском клиента ``` mongo``` или ``` mongosh```.

В моём случае не было клиента ``` mongo``` -- я использовал ``` mongosh```, 
чтобы запустить ``` mongosh``` для ``` docker``` контейнера, выполнил:
```bash
doas docker exec -it mongo-lab7-8 mongosh
```

После запуска открылся shell для управления базой данных. База данных
по умолчанию была ``` test```.

== Выполнение методов

+ ``` db.help()```:
    В результате выполнения метода, были выведены все возможные
    методы для объекта db. [@add1]

+ ``` db.help```:
    Результат выполнения аналогичен предыдущему выводу.

+ ``` db.stats()```:
#raw(read("./db_stats.json"), lang: "json", block: true)

== Получите список доступных БД
Для получения списка доступных таблиц, я выполнил в mongosh
следующую команду:
```js
show databases
```

Результат выполнения:
#raw(read("./databases.json"), lang: "json", block: true)

== Создание Базы Данных.
```js
use Mokhov_KS34
```

== Создание коллекции и добавление документов.
Для упрощения добавления документов, я решил создать функцию:
```js
function insert_row(start_date, proj_name, family_name, age, proj_type, duration, cost){ 
	db.projects.insertOne({ start_date: start_date, project_name: proj_name, family_name: family_name, age: age, proj_type: proj_type, duration: duration, cost: cost });
}
```

Затем в ручную с помощью функции ``` insert_row``` добавил все
документы в соответствии с заданием первой лабораторной работы
11-го варианта.

Пример команды:
```js
insert_row("3.02.04", "Проект1", "Иванов", 30, "Технология", 5, 1200)
```

== Список коллекций и Содержимого коллекции.
Для вывода списка коллекций использовал команду:
```js
show collections
```
результат:
#raw(read("./projects.json"), lang: "json", block: true)

Для вывода содержимого коллекции использовал команду:
```js
db.projects.find()
```

Результат вывода.
#raw(read("./find.json"), lang: "js", block: true)

== Создание экспорта
Экспорт был создан командой ``` mongoexport```
```bash
doas docker -it mongo-lab7-8 mongoexport -d Mokhov_KS34 -c projects \
	--jsonArray --quiet > lab7_dump.json
```

Содержания файла:
#raw(read("./lab7_dump.json"), lang: "json", block: true)

= Вывод
В результате выполнения лабораторной работы я освоился с
управлением и основным интерфейсом базы данных MongoDB, c
тем как запускать её через docker контейнер и применения
инструмента ``` mongoexport``` для создания экспорта 
определённой коллекции.

= Приложения
#figure(
    kind: "Add",
    supplement: "Приложение",
    caption: [Результат выполнения команды ``` db.help()```.],
    raw(read("./db_help.txt"), block: true, lang: "txt")
)<add1>
